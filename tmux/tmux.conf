#-------------------------------------------------------------------------------
#   TMUX CONFIG
#-------------------------------------------------------------------------------
# NOTE: this overrides specify terminal capabilities you are overriding within tmux,
# this should "normally" be "xterm-256color" or "tmux-256color" but in the case of
# kitty it should be "xterm-kitty" so the solution/workaround here is to use the
# value of $TERM. This might not work for all terminals.
# see:
# https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
# https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.term
# Heavily based on https://github.com/akinsho/dotfiles/blob/main/.config/tmux/tmux.conf
# set -g default-terminal "${TERM}"
# set -as terminal-features ",${TERM}:RGB"
set -g default-terminal "tmux-256color"
set-option -a terminal-features 'xterm-256color:RGB'
#-------------------------------------------------------------------------------
#  Terminal settings {{{1
#-------------------------------------------------------------------------------
# Allow undercurls for terminals that support them.
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Allow coloured undercurls for terminals that support them.
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# kitty graphics protocol
set -gq allow-passthrough on
# }}}
#-------------------------------------------------------------------------------
#  Prefix {{{1
#-------------------------------------------------------------------------------
set-option -g prefix C-space
unbind-key C-b
bind-key C-space send-prefix

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+

bind a last-window

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# super useful when using "grouped sessions" and multi-monitor setup
set-option -wg aggressive-resize on
set-option -sg escape-time 10
set-option  -g focus-events on
set-option  -g history-limit 100000
set-option  -g renumber-windows on

bind r source-file $XDG_CONFIG_HOME/tmux/tmux.conf \; display "Reloaded!"

bind . next-layout

# hide current pane and switch to the other one
bind Z select-pane -l \; resize-pane -Z
bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt
unbind z # unbind default zoom
bind z resize-pane -Z
# }}}
#-------------------------------------------------------------------------------
#  Display {{{1
#-------------------------------------------------------------------------------
set-option    -g set-titles on
set-option    -g set-titles-string '‚ùê #S @ #I'
set-option    -g allow-rename on
set-option    -g pane-base-index 1
set-option    -g base-index 1
set-option    -g monitor-activity on
set-option   -sg repeat-time 600
set-option    -g display-time 1000
set-option    -g status-interval 5
set-option   -wg automatic-rename on
set-option    -g automatic-rename-format '#{b:pane_current_path}'
set-option    -g monitor-activity on
set-option    -g visual-activity off
# Disable tmux statusline on zooming into a pane
# @see https://gist.github.com/bartj3/6d3bd8efd2ceaf02d443
# set-hook -g after-resize-pane "if-shell \"tmux list-panes -F '#F' | grep -q Z\" \"set -g status off\" \"set -g status on\""
# }}}
#-------------------------------------------------------------------------------
#  Navigation {{{1
#-------------------------------------------------------------------------------
set-option -g mouse on

# tmux-fzf
TMUX_FZF_LAUNCH_KEY="F"
TMUX_FZF_ORDER="session|window|pane|command|keybinding"
bind-key C-w run -b "~/.config/tmux/plugins/tmux-fzf/scripts/window.sh switch"
bind-key C-p run -b "~/.config/tmux/plugins/tmux-fzf/scripts/pane.sh switch"

bind '%' split-window -h -c '#{?pane_path,#{pane_path},#{pane_current_path}}'
bind '"' split-window -v -c '#{?pane_path,#{pane_path},#{pane_current_path}}'
# unbind '"'
# unbind %

# kitty scrollback
# bind [ run-shell 'kitty @ kitten /Users/omerta/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --env "TMUX=$TMUX" --env "TMUX_PANE=#{pane_id}"'

setw -g mode-keys vi # set vi mode for copy mode
# more settings to make copy-mode more vim-like
# bind Escape copy-mode
# setup 'v' to begin selection as in Vim
unbind-key -T copy-mode-vi Enter
bind-key -T copy-mode-vi v send-keys   -X begin-selection
bind-key -T copy-mode-vi c-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys   -X copy-selection
if-shell '[[ $(uname -s) = Linux ]]' {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
} {
   bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
}

# Synchronize all panes in a window
bind y setw synchronize-panes
# easier and faster switching between next/prev window
# bind p previous-window
# bind n next-window

# detach client
bind-key d detach
bind-key C-d detach

# swap panes
bind-key -r J swap-pane -D
bind-key -r K swap-pane -U

# Pane borders and names
# set -g pane-border-status off
# set-hook -g window-layout-changed 'set-window -F pane-border-status "#{?#{==:#{window_panes},1},off,bottom}"'
# set -g pane-border-format "#{pane_index} #{b:pane_current_path}"
# bind-key < set-window -F pane-border-status "#{?#{==:#{pane-border-status}off},bottom,off}"
# set -g pane-border-format "#[fg=black, bg=green] #{pane_index} #{@custom_pane_title}"
# bind < command-prompt -p "New Title: " -I "#{@custom_pane_title}" "set-option -p @custom_pane_title '%%'"

bind c new-window -c '#{pane_current_path}'
bind g new-window -c '#{pane_current_path}' -n 'üå≥' lazygit
bind f new-window -c '#{pane_current_path}' -n 'Û±§Ñ' lf

unbind -T copy-mode-vi MouseDragEnd1Pane

# Smart pane switching with awareness of Vim splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

# navi https://github.com/denisidoro/navi
bind-key -T prefix C-g split-window \
  "$SHELL --login -i -c 'navi --print | head -n 1 | tmux load-buffer -b tmp - ; tmux paste-buffer -p -t {last} -b tmp -d'"

# Resize panes
bind-key -n M-h if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 5'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 5'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 5'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 5'

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'
# }}}
#-------------------------------------------------------------------------------
#  Status Bar {{{1
#-------------------------------------------------------------------------------
bind-key b set-option status

INACTIVE_FG_COLOR='#5c6370'
ACTIVE_FG_COLOR='#76946A'

set-option -g status on
set-option -g status-position top
set-option -g status-style fg=terminal
set-option -g status-style bg=terminal
set-option -g status-justify centre
set-option -g status-interval 1

# NOTE: these use nested conditionals and "," and "}" must be escaped
search_icon="#{?window_active,#{?window_zoomed_flag,#[fg=blue] ÔÅ• , },}"
pane_count="#[default]#{?window_active,#[fg=$INACTIVE_FG_COLOR](#{window_panes}),}"
status_items="#[default]#{?window_bell_flag,#[fg=red]ÓÆö ,}$pane_count$search_icon"
# Show pane's path basename when switching panes
pane_path="#{?#{>=:#{window_panes},2}, [#{pane_index}:#{b:pane_current_path}],}"
set -g status-left-length  80
set -g status-right-length 70

set -g status-left "#{?client_prefix,#[fg=#ffffff bg=#22252B],#[fg=$ACTIVE_FG_COLOR,bold]} Ó¨£ #S "
set -g status-right ""

set-window-option -g window-status-style fg=$INACTIVE_FG_COLOR
# set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-current-style fg=$ACTIVE_FG_COLOR
set-window-option -g window-status-current-format " #I. #[italics]#W$pane_path $status_items"
set-window-option -g window-status-format " #I. #[italics]#W $status_items"
set-window-option -g window-status-activity-style none # defaults to reverse
set-window-option -g window-status-separator "#[fg=$INACTIVE_FG_COLOR]Óò°"

# tmux commandline styling
set-option -g message-style fg=yellow,bg=terminal,bold
# styling when in command mode i.e. vi or emacs mode in tmux command line
set-option -g message-command-style fg=green,bg=terminal,bold,blink
# styling for the search indicator
set-option -g mode-style bg=terminal,fg=brightgreen,bold
# }}}
#-------------------------------------------------------------------------------
#  Pane border {{{1
#-------------------------------------------------------------------------------
set-option        -g pane-active-border-style fg='#343d46'
set-option        -g pane-border-style        fg='#343d46'
# }}}

# Smart session management
bind-key "C-t" run-shell "sesh connect \"$(
	sesh list --icons | fzf-tmux -p 55%,60% \
		--no-sort --ansi --border-label ' sesh ' --prompt '‚ö°  ' \
		--header '  ^a all ^t tmux ^x zoxide ^f find' \
		--bind 'tab:down,btab:up' \
		--bind 'ctrl-a:change-prompt(‚ö°  )+reload(sesh list --icons)' \
		--bind 'ctrl-t:change-prompt(ü™ü  )+reload(sesh list -t --icons)' \
		--bind 'ctrl-x:change-prompt(üìÅ  )+reload(sesh list -z --icons)' \
		--bind 'ctrl-f:change-prompt(üî≠  )+reload(fd -H -d 2 -t d -E .Trash . ~)'
)\""
# Use gum instead of fzf
bind-key "T" display-popup -E -w 40% "sesh connect \"$(
 sesh list -i | gum filter --limit 1 --no-sort --fuzzy --placeholder 'Pick a sesh' --height 50 --prompt='‚ö°'
)\""

# Capture URLs from the terminal
# https://github.com/pbnj/.dotfiles/blob/6fb7e60862b364a78f3fe46be197c4c3be19cff7/tmux/.config/tmux/.tmux.conf.osx#L19
# bind-key u run-shell -b "tmux capture-pane -J -p | grep -oE '(https?):\/\/.*[^>]' | fzf-tmux -d20 --multi --bind alt-a:select-all,alt-d:deselect-all | xargs open"

set -g @thumbs-command 'echo -n {} | pbcopy' # copy to clipboard
set -g @thumbs-key C
set -g @thumbs-hint-fg-color red

#-------------------------------------------------------------------------------
#  Plugins {{{1
#-------------------------------------------------------------------------------
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'fcsonline/tmux-thumbs'
# set -g @plugin 'wfxr/tmux-fzf-url'
set -g @plugin 'junegunn/tmux-fzf-url'
set -g @plugin 'laktak/extrakto'
# set -g @plugin 'tmux-plugins/tmux-sessionist'
#-------------------------------------------------------------------------------
# # Saves and restores tmux sessions beyond system crashes and restarts
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# # Auto saves tmux environment and keeps tmux running
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @continuum-restore 'on'
# set -g @resurrect-strategy-nvim 'session'
# #-------------------------------------------------------------------------------
# # Adds better bindings for switching windows,panes & resizing
# set -g @plugin 'tmux-plugins/tmux-pain-control'
# set-option -g @pane_resize "10"
# #-------------------------------------------------------------------------------
# set -g @plugin 'tmux-plugins/tmux-battery'
# set -g @plugin 'nhdaly/tmux-better-mouse-mode'
#-------------------------------------------------------------------------------
# set -g @plugin 'tmux-plugins/tmux-open'
run-shell ~/.config/tmux/plugins/tpm/tpm
# }}}
#-----------------------------------------------------------------------------
