return {
  "mfussenegger/nvim-dap",
  dependencies = {
    {
      "rcarriga/nvim-dap-ui",

      config = function()
        require("dapui").setup()
      end,
    },
  },
  keys = {
    {
      "<leader>db",
      function()
        require("dap").toggle_breakpoint()
      end,
      desc = "Toggle Breakpoint"
    },
    {
      "<leader>dc",
      function()
        require("dap").continue()
      end,
      desc = "Continue"
    },
    {
      "<leader>do",
      function()
        require("dap").step_over()
      end,
      desc = "Step Over"
    },
    { "<leader>di",
      function()
        require("dap").step_into()
      end,
      desc = "Step Into"
    },
    { "<leader>dw",
      function()
        require("dap.ui.widgets").hover()
      end,
      desc = "Widgets"
    },
    { "<leader>dr",
      function()
        require("dap").repl.open()
      end,
      desc = "Repl"
    },
    { "<leader>du",
      function()
        require("dapui").toggle({})
      end,
      desc = "Dap UI"
    },
  },
  config = function()
    local dap = require("dap")

    -- dart and flutter
    dap.adapters.dart = {
      type = "executable",
      command = "node",
      args = { require('util.init').get_dap_adapter_path('dart-debug-adapter') .. "/extension/out/dist/debug.js", "flutter" }
    }
    dap.configurations.dart = {
      {
        type = "dart",
        request = "launch",
        name = "Launch flutter",
        dartSdkPath = os.getenv('HOME') .. "/.local/flutter/bin/cache/dart-sdk/",
        flutterSdkPath = os.getenv('HOME') .. "/.local/flutter",
        program = "${workspaceFolder}/lib/main.dart",
        cwd = "${workspaceFolder}",
      }
    }

    -- node
    dap.adapters.node2 = {
      type = 'executable',
      command = 'node',
      args = { require('util').get_dap_adapter_path('node-debug2-adapter') .. '/out/src/nodeDebug.js' }
    }
    dap.configurations.javascript = {
      {
        name = 'Launch',
        type = 'node2',
        request = 'launch',
        program = '${file}',
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = 'inspector',
        console = 'integratedTerminal',
      },
      {
        -- For this to work you need to make sure the node process is started with the `--inspect` flag.
        name = 'Attach to process',
        type = 'node2',
        request = 'attach',
        processId = require 'dap.utils'.pick_process,
      },
    }

    -- chrome
    dap.adapters.chrome = {
      type = "executable",
      command = "node",
      args = { require('util').get_dap_adapter_path('chrome-debug-adapter') .. "/out/src/chromeDebug.js" } -- TODO adjust
    }

    dap.configurations.javascriptreact = { -- change this to javascript if needed
      {
        type = "chrome",
        request = "attach",
        program = "${file}",
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = "inspector",
        port = 9222,
        webRoot = "${workspaceFolder}"
      }
    }

    dap.configurations.typescriptreact = { -- change to typescript if needed
      {
        type = "chrome",
        request = "attach",
        program = "${file}",
        cwd = vim.fn.getcwd(),
        sourceMaps = true,
        protocol = "inspector",
        port = 9222,
        webRoot = "${workspaceFolder}"
      }
    }

    -- Firefox
    dap.adapters.firefox = {
      type = 'executable',
      command = 'node',
      args = { require('util').get_dap_adapter_path('firefox-debug-adapter') .. '/dist/adapter.bundle.js' },
    }

    dap.configurations.typescript = {
      {
        name = 'Debug with Firefox',
        type = 'firefox',
        request = 'launch',
        reAttach = true,
        url = 'http://localhost:3000',
        webRoot = '${workspaceFolder}',
        firefoxExecutable = '/usr/bin/firefox'
      }
    }

    local dapui = require("dapui")
    dap.listeners.after.event_initialized["dapui_config"] = function()
      dapui.open({})
    end
    dap.listeners.before.event_terminated["dapui_config"] = function()
      dapui.close({})
    end
    dap.listeners.before.event_exited["dapui_config"] = function()
      dapui.close({})
    end
  end
}
